#!/bin/bash
{
	#////////////////////////////////////
	# DietPi-Cron:
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Menu system that allows users to change the start dates/times for all cron jobs.
	#
	# Usage:
	# - /DietPi/dietpi/dietpi-cron
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Cron'
	G_CHECK_ROOT_USER
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	TARGETMENUID=0
	PREVIOUS_MENU_SELECTION='cron.minutely'
	aCRON_TIME=()
	aDAY_OF_THE_WEEK_TEXT=(

		'Monday'
		'Tuesday'
		'Wednesday'
		'Thursday'
		'Friday'
		'Saturday'
		'Sunday'

	)

	Read_Cron_Times(){

		# hourly_min
		aCRON_TIME[0]=$(mawk '/cron.hourly/ {print $1;exit}' /etc/crontab)

		# daily_min / daily_hour
		aCRON_TIME[1]=$(mawk '/cron.daily/ {print $1;exit}' /etc/crontab)
		aCRON_TIME[2]=$(mawk '/cron.daily/ {print $2;exit}' /etc/crontab)

		# weekly_min / weekly_hour / weekly_day_of_week
		aCRON_TIME[3]=$(mawk '/cron.weekly/ {print $1;exit}' /etc/crontab)
		aCRON_TIME[4]=$(mawk '/cron.weekly/ {print $2;exit}' /etc/crontab)
		aCRON_TIME[5]=$(mawk '/cron.weekly/ {print $5;exit}' /etc/crontab)

		# monthly_min / monthly_hour / monthly_day_of_month
		aCRON_TIME[6]=$(mawk '/cron.monthly/ {print $1;exit}' /etc/crontab)
		aCRON_TIME[7]=$(mawk '/cron.monthly/ {print $2;exit}' /etc/crontab)
		aCRON_TIME[8]=$(mawk '/cron.monthly/ {print $3;exit}' /etc/crontab)

		# minutely_min
		aCRON_TIME[9]=$(mawk -F'[/ ]' '/cron.minutely/ {print $2;exit}' /etc/crontab)

		# Check for valid ints
		for i in ${!aCRON_TIME[@]}
		do

			disable_error=1 G_CHECK_VALIDINT "${aCRON_TIME[$i]}" || aCRON_TIME[$i]=1 # Override

		done

	}

	Write_Cron_Times(){

		cat << _EOF_ > /etc/crontab
# Please use dietpi-cron to change cron start times
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user command
*/${aCRON_TIME[9]} * * * * root cd / && run-parts --report /etc/cron.minutely
${aCRON_TIME[0]} * * * * root cd / && run-parts --report /etc/cron.hourly
${aCRON_TIME[1]} ${aCRON_TIME[2]} * * * root test -x /usr/sbin/anacron || { cd / && run-parts --report /etc/cron.daily; }
${aCRON_TIME[3]} ${aCRON_TIME[4]} * * ${aCRON_TIME[5]} root test -x /usr/sbin/anacron || { cd / && run-parts --report /etc/cron.weekly; }
${aCRON_TIME[6]} ${aCRON_TIME[7]} ${aCRON_TIME[8]} * * root test -x /usr/sbin/anacron || { cd / && run-parts --report /etc/cron.monthly; }
_EOF_

		(( ${aCRON_TIME[9]} == 0 )) && sed -i 's|^*/0 |#*/0 |' /etc/crontab

	}

	Input_Cron_Minutely_Minute(){

		local input_value=$1
		local min_value=0
		local max_value=59

		G_WHIP_DEFAULT_ITEM=$input_value
		if G_WHIP_INPUTBOX "Please enter the execution interval in minutes:
 - Valid range (0 - $max_value)
 - Enter 0 to disable this job"; then

			# Valid input?
			G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" $min_value $max_value && input_value=$G_WHIP_RETURNED_VALUE

		fi

		return $input_value

	}

	Input_Cron_Minute(){

		local input_value=$1
		local min_value=0
		local max_value=59

		G_WHIP_DEFAULT_ITEM=$input_value
		if G_WHIP_INPUTBOX "Please enter a value for MINUTE:\n - Valid range ($min_value - $max_value)"; then

			# Valid input?
			G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" $min_value $max_value && input_value=$G_WHIP_RETURNED_VALUE

		fi

		return $input_value

	}

	Input_Cron_Hour(){

		local input_value=$1
		local min_value=0
		local max_value=23

		G_WHIP_DEFAULT_ITEM=$input_value
		if G_WHIP_INPUTBOX "Please enter a value for HOUR (24h):\n - Valid range ($min_value - $max_value)"; then

			# Valid input?
			G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" $min_value $max_value && input_value=$G_WHIP_RETURNED_VALUE

		fi

		return $input_value

	}

	Input_Cron_DayOfWeek(){

		local input_value=$1
		local min_value=1
		local max_value=7

		G_WHIP_MENU_ARRAY=(

			'1' ": ${aDAY_OF_THE_WEEK_TEXT[0]}"
			'2' ": ${aDAY_OF_THE_WEEK_TEXT[1]}"
			'3' ": ${aDAY_OF_THE_WEEK_TEXT[2]}"
			'4' ": ${aDAY_OF_THE_WEEK_TEXT[3]}"
			'5' ": ${aDAY_OF_THE_WEEK_TEXT[4]}"
			'6' ": ${aDAY_OF_THE_WEEK_TEXT[5]}"
			'7' ": ${aDAY_OF_THE_WEEK_TEXT[6]}"

		)

		G_WHIP_DEFAULT_ITEM=$input_value
		G_WHIP_MENU 'Please select a day of the week.' && input_value=$G_WHIP_RETURNED_VALUE

		return $input_value

	}

	Input_Cron_DayOfMonth(){

		local input_value=$1
		local min_value=1
		local max_value=28

		G_WHIP_DEFAULT_ITEM=$input_value
		if G_WHIP_INPUTBOX "Please enter a value for DAY of the MONTH:
 - Valid range ($min_value - $max_value)
 - eg: 11 = the 11th day of month"; then

			# Valid input?
			G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" $min_value $max_value && input_value=$G_WHIP_RETURNED_VALUE

		fi

		return $input_value

	}


	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?" && TARGETMENUID=-1 # Exit

	}

	Menu_Main(){

		case "${aCRON_TIME[9]}" in

			'0')

				minute_string='Disabled'

			;;

			'1')

				minute_string='Every Minute'

			;;

			*)

				minute_string="Every ${aCRON_TIME[9]} Minutes"

			;;

		esac

		G_WHIP_MENU_ARRAY=(

			'' '●─ Options '
			'cron.minutely' ": $minute_string"
			'cron.hourly' ": Every Hour at ${aCRON_TIME[0]} Minutes"
			'cron.daily' ": Every Day at ${aCRON_TIME[2]} Hours and ${aCRON_TIME[1]} Minutes"
			'cron.weekly' ": Every ${aDAY_OF_THE_WEEK_TEXT[$(( ${aCRON_TIME[5]} - 1))]} at ${aCRON_TIME[4]} Hours and ${aCRON_TIME[3]} Minutes"
			'cron.monthly' ": On Day ${aCRON_TIME[8]} of the month at ${aCRON_TIME[7]} Hours and ${aCRON_TIME[6]} Minutes"
			'' '●─ Save changes '
			'Apply' ': Saves your cron start times and restarts service.'

		)

		G_WHIP_DEFAULT_ITEM=$PREVIOUS_MENU_SELECTION
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		if G_WHIP_MENU "$G_PROGRAM_NAME allows you to change the date and times for starting each cron job.
\n- Example:\nIf you set cron.daily to 22 hours and 20 minutes, all scripts in /etc/cron.daily/* will be run at 10:20pm."; then

			PREVIOUS_MENU_SELECTION=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'cron.minutely')

					Input_Cron_Minutely_Minute ${aCRON_TIME[9]}
					aCRON_TIME[9]=$?

				;;

				'cron.hourly')

					Input_Cron_Minute ${aCRON_TIME[0]}
					aCRON_TIME[0]=$?
				;;

				'cron.daily')

					Input_Cron_Hour ${aCRON_TIME[2]}
					aCRON_TIME[2]=$?

					Input_Cron_Minute ${aCRON_TIME[1]}
					aCRON_TIME[1]=$?
				;;

				'cron.weekly')

					Input_Cron_DayOfWeek ${aCRON_TIME[5]}
					aCRON_TIME[5]=$?

					Input_Cron_Hour ${aCRON_TIME[4]}
					aCRON_TIME[4]=$?

					Input_Cron_Minute ${aCRON_TIME[3]}
					aCRON_TIME[3]=$?
				;;

				'cron.monthly')

					Input_Cron_DayOfMonth ${aCRON_TIME[8]}
					aCRON_TIME[8]=$?

					Input_Cron_Hour ${aCRON_TIME[7]}
					aCRON_TIME[7]=$?

					Input_Cron_Minute ${aCRON_TIME[6]}
					aCRON_TIME[6]=$?

				;;

				'Apply')

					Write_Cron_Times
					/DietPi/dietpi/dietpi-services restart cron

					G_WHIP_MSG 'Cron start times have been saved and applied.'

				;;

			esac

		# Exit
		else

			Menu_Exit

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	# Get current values
	Read_Cron_Times
	#-----------------------------------------------------------------------------------
	# Start Menu
	while (( $TARGETMENUID > -1 )); do

		G_TERM_CLEAR
		Menu_Main

	done
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
