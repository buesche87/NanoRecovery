#!/bin/bash
{
	#////////////////////////////////////
	# DietPi RAMDISK Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - $FP_RAM is mounted as tmpfs (RAMdisk) before this script runs.
	# - When booting this script copies DietPi from $FP_DISK to $FP_RAM and creates an active flag file: $FP_RAM/.ramdisk
	# - This allows us to vastly reduce filesystem I/O and increase performance across DietPi.
	# - When shutting down this script stores DietPi from $FP_RAM back to $FP_DISK and removes the flag file.
	#
	# Usage:
	# - /DietPi/dietpi/func/dietpi-ramdisk 0	= Copy from $FP_DISK to $FP_RAM
	# - /DietPi/dietpi/func/dietpi-ramdisk 1	= Store from $FP_RAM to $FP_DISK
	#////////////////////////////////////

	#-----------------------------------------------------------------------------------
	#. /DietPi/dietpi/func/dietpi-globals	# Not compatible until DietPi-PreBoot has finished and overkill for the purpose of this script.
	#export LC_ALL=en_GB.UTF-8		# Not required, as we do not parse any external command and "date" is allowed to be in user locale format.
	#cd $HOME				# Not required, as we do not create any tmp files and produces and: "cd: HOME not set"
	#-----------------------------------------------------------------------------------

	[[ $1 =~ ^-?[0-9]+$ ]] && INPUT=$1 || INPUT=-1

	EXIT_CODE=0

	PROGRAM_NAME='DietPi-RAMdisk'
	FP_RAM='/DietPi'
	FP_DISK='/boot'

	# List of ini/config files located in /boot
	aFILE_BOOT_INI=(

		'dietpi.txt'
		'config.txt'
		'boot.ini'
		'uEnv.txt'

	)

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////

	# Startup phase: Copy to RAM
	if (( $INPUT == 0 )); then

		echo "$(date) | $PROGRAM_NAME: Copying DietPi to RAM..."

		if [[ ! -f $FP_RAM'/.ramdisk' ]]; then

			# - Failsafe: Assure empty $FP_RAM
			[[ -d $FP_RAM ]] && rm -Rf $FP_RAM/{,.??,.[^.]}* || mkdir -p $FP_RAM || EXIT_CODE=1

			# - Copy array of /boot/* files to RAM (config/ini etc)
			for i in ${aFILE_BOOT_INI[@]}
			do

				if [[ -f $FP_DISK/$i ]]; then

					cp $FP_DISK/$i $FP_RAM/ || EXIT_CODE=1

					# - Convert line endings to Unix from DOS. Prevents various issues where users modify file on another system, then save with DOS line endings: https://github.com/MichaIng/DietPi/issues/390
					sed -i $'s/\r$//' $FP_RAM/$i || EXIT_CODE=1

				fi

			done

			# - Copy DietPi to RAM
			cp -Rf $FP_DISK/dietpi $FP_RAM/ || EXIT_CODE=1

			# - Set exec permissions
			chmod -R +x $FP_RAM || EXIT_CODE=1

			# - Generate active flag
			> $FP_RAM/.ramdisk || EXIT_CODE=1

			if (( $EXIT_CODE )); then

				echo "$(date) | $PROGRAM_NAME: [ERROR] An issue occurred while copying DietPi to RAM."

			else

				echo "$(date) | $PROGRAM_NAME: Copied DietPi to RAM."

			fi

		else

			echo "$(date) | $PROGRAM_NAME: DietPi is already in RAM. Aborting..."

		fi

	# Shutdown phase: Store to disk
	elif (( $INPUT == 1 )); then

		echo "$(date) | $PROGRAM_NAME: Storing DietPi to disk..."

		if [[ -f $FP_RAM'/.ramdisk' ]]; then

			# - Remove old DietPi form disk before storing new DietPi from RAM
			#rm -R $FP_DISK/dietpi # Skip this to prevent unrecoverable removal of DietPi in case of error while copying to RAM

			# - Remove status files that are recreated on boot/demand
			rm -f $FP_RAM/dietpi/.{update_available,timesync_exit_status}

			# - Store DietPi to disk
			cp -Rf $FP_RAM/* $FP_DISK/ || EXIT_CODE=1

			# - Remove active flag
			rm $FP_RAM/.ramdisk || EXIT_CODE=1

			# - Failsafe due to "async": Force sync NOW!
			sync

			if (( $EXIT_CODE )); then

				echo "$(date) | $PROGRAM_NAME: [ERROR] An issue occurred while storing DietPi to RAM."

			else

				echo "$(date) | $PROGRAM_NAME: Stored DietPi to disk."

			fi

		else

			echo "$(date) | $PROGRAM_NAME: DietPi is not in RAM. Aborting..."

		fi

	else

		echo "$(date) | $PROGRAM_NAME: [ERROR] Unknown input argument: $INPUT. Aborting..."
		EXIT_CODE=1

	fi

	#-----------------------------------------------------------------------------------
	exit $EXIT_CODE
	#-----------------------------------------------------------------------------------
}
